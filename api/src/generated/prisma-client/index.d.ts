// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  image: (where?: ImageWhereInput) => Promise<boolean>;
  interaction: (where?: InteractionWhereInput) => Promise<boolean>;
  manufacturer: (where?: ManufacturerWhereInput) => Promise<boolean>;
  nendoroid: (where?: NendoroidWhereInput) => Promise<boolean>;
  sculptor: (where?: SculptorWhereInput) => Promise<boolean>;
  serie: (where?: SerieWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  image: (where: ImageWhereUniqueInput) => ImageNullablePromise;
  images: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Image>;
  imagesConnection: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImageConnectionPromise;
  interaction: (
    where: InteractionWhereUniqueInput
  ) => InteractionNullablePromise;
  interactions: (args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Interaction>;
  interactionsConnection: (args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InteractionConnectionPromise;
  manufacturer: (
    where: ManufacturerWhereUniqueInput
  ) => ManufacturerNullablePromise;
  manufacturers: (args?: {
    where?: ManufacturerWhereInput;
    orderBy?: ManufacturerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Manufacturer>;
  manufacturersConnection: (args?: {
    where?: ManufacturerWhereInput;
    orderBy?: ManufacturerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ManufacturerConnectionPromise;
  nendoroid: (where: NendoroidWhereUniqueInput) => NendoroidNullablePromise;
  nendoroids: (args?: {
    where?: NendoroidWhereInput;
    orderBy?: NendoroidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Nendoroid>;
  nendoroidsConnection: (args?: {
    where?: NendoroidWhereInput;
    orderBy?: NendoroidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NendoroidConnectionPromise;
  sculptor: (where: SculptorWhereUniqueInput) => SculptorNullablePromise;
  sculptors: (args?: {
    where?: SculptorWhereInput;
    orderBy?: SculptorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sculptor>;
  sculptorsConnection: (args?: {
    where?: SculptorWhereInput;
    orderBy?: SculptorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SculptorConnectionPromise;
  serie: (where: SerieWhereUniqueInput) => SerieNullablePromise;
  series: (args?: {
    where?: SerieWhereInput;
    orderBy?: SerieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Serie>;
  seriesConnection: (args?: {
    where?: SerieWhereInput;
    orderBy?: SerieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SerieConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (args: {
    data: ImageUpdateInput;
    where: ImageWhereUniqueInput;
  }) => ImagePromise;
  updateManyImages: (args: {
    data: ImageUpdateManyMutationInput;
    where?: ImageWhereInput;
  }) => BatchPayloadPromise;
  upsertImage: (args: {
    where: ImageWhereUniqueInput;
    create: ImageCreateInput;
    update: ImageUpdateInput;
  }) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createInteraction: (data: InteractionCreateInput) => InteractionPromise;
  updateInteraction: (args: {
    data: InteractionUpdateInput;
    where: InteractionWhereUniqueInput;
  }) => InteractionPromise;
  updateManyInteractions: (args: {
    data: InteractionUpdateManyMutationInput;
    where?: InteractionWhereInput;
  }) => BatchPayloadPromise;
  upsertInteraction: (args: {
    where: InteractionWhereUniqueInput;
    create: InteractionCreateInput;
    update: InteractionUpdateInput;
  }) => InteractionPromise;
  deleteInteraction: (where: InteractionWhereUniqueInput) => InteractionPromise;
  deleteManyInteractions: (
    where?: InteractionWhereInput
  ) => BatchPayloadPromise;
  createManufacturer: (data: ManufacturerCreateInput) => ManufacturerPromise;
  updateManufacturer: (args: {
    data: ManufacturerUpdateInput;
    where: ManufacturerWhereUniqueInput;
  }) => ManufacturerPromise;
  updateManyManufacturers: (args: {
    data: ManufacturerUpdateManyMutationInput;
    where?: ManufacturerWhereInput;
  }) => BatchPayloadPromise;
  upsertManufacturer: (args: {
    where: ManufacturerWhereUniqueInput;
    create: ManufacturerCreateInput;
    update: ManufacturerUpdateInput;
  }) => ManufacturerPromise;
  deleteManufacturer: (
    where: ManufacturerWhereUniqueInput
  ) => ManufacturerPromise;
  deleteManyManufacturers: (
    where?: ManufacturerWhereInput
  ) => BatchPayloadPromise;
  createNendoroid: (data: NendoroidCreateInput) => NendoroidPromise;
  updateNendoroid: (args: {
    data: NendoroidUpdateInput;
    where: NendoroidWhereUniqueInput;
  }) => NendoroidPromise;
  updateManyNendoroids: (args: {
    data: NendoroidUpdateManyMutationInput;
    where?: NendoroidWhereInput;
  }) => BatchPayloadPromise;
  upsertNendoroid: (args: {
    where: NendoroidWhereUniqueInput;
    create: NendoroidCreateInput;
    update: NendoroidUpdateInput;
  }) => NendoroidPromise;
  deleteNendoroid: (where: NendoroidWhereUniqueInput) => NendoroidPromise;
  deleteManyNendoroids: (where?: NendoroidWhereInput) => BatchPayloadPromise;
  createSculptor: (data: SculptorCreateInput) => SculptorPromise;
  updateSculptor: (args: {
    data: SculptorUpdateInput;
    where: SculptorWhereUniqueInput;
  }) => SculptorPromise;
  updateManySculptors: (args: {
    data: SculptorUpdateManyMutationInput;
    where?: SculptorWhereInput;
  }) => BatchPayloadPromise;
  upsertSculptor: (args: {
    where: SculptorWhereUniqueInput;
    create: SculptorCreateInput;
    update: SculptorUpdateInput;
  }) => SculptorPromise;
  deleteSculptor: (where: SculptorWhereUniqueInput) => SculptorPromise;
  deleteManySculptors: (where?: SculptorWhereInput) => BatchPayloadPromise;
  createSerie: (data: SerieCreateInput) => SeriePromise;
  updateSerie: (args: {
    data: SerieUpdateInput;
    where: SerieWhereUniqueInput;
  }) => SeriePromise;
  updateManySeries: (args: {
    data: SerieUpdateManyMutationInput;
    where?: SerieWhereInput;
  }) => BatchPayloadPromise;
  upsertSerie: (args: {
    where: SerieWhereUniqueInput;
    create: SerieCreateInput;
    update: SerieUpdateInput;
  }) => SeriePromise;
  deleteSerie: (where: SerieWhereUniqueInput) => SeriePromise;
  deleteManySeries: (where?: SerieWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  image: (
    where?: ImageSubscriptionWhereInput
  ) => ImageSubscriptionPayloadSubscription;
  interaction: (
    where?: InteractionSubscriptionWhereInput
  ) => InteractionSubscriptionPayloadSubscription;
  manufacturer: (
    where?: ManufacturerSubscriptionWhereInput
  ) => ManufacturerSubscriptionPayloadSubscription;
  nendoroid: (
    where?: NendoroidSubscriptionWhereInput
  ) => NendoroidSubscriptionPayloadSubscription;
  sculptor: (
    where?: SculptorSubscriptionWhereInput
  ) => SculptorSubscriptionPayloadSubscription;
  serie: (
    where?: SerieSubscriptionWhereInput
  ) => SerieSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "likes_ASC"
  | "likes_DESC"
  | "views_ASC"
  | "views_DESC"
  | "title_ASC"
  | "title_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "url_ASC"
  | "url_DESC";

export type InteractionType = "LIKE" | "WISH" | "OWN";

export type InteractionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ManufacturerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type NendoroidOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "number_ASC"
  | "number_DESC"
  | "formattedName_ASC"
  | "formattedName_DESC"
  | "title_ASC"
  | "title_DESC"
  | "series_ASC"
  | "series_DESC"
  | "manufacturer_ASC"
  | "manufacturer_DESC"
  | "category_ASC"
  | "category_DESC"
  | "price_ASC"
  | "price_DESC"
  | "releaseDate_ASC"
  | "releaseDate_DESC"
  | "specifications_ASC"
  | "specifications_DESC"
  | "sculptor_ASC"
  | "sculptor_DESC"
  | "cooperation_ASC"
  | "cooperation_DESC"
  | "planningProduction_ASC"
  | "planningProduction_DESC"
  | "releasedBy_ASC"
  | "releasedBy_DESC"
  | "distributedBy_ASC"
  | "distributedBy_DESC"
  | "srcUrl_ASC"
  | "srcUrl_DESC"
  | "range_ASC"
  | "range_DESC";

export type SculptorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type SerieOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "pseudo_ASC"
  | "pseudo_DESC"
  | "email_ASC"
  | "email_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  likes?: Maybe<Int>;
  likes_not?: Maybe<Int>;
  likes_in?: Maybe<Int[] | Int>;
  likes_not_in?: Maybe<Int[] | Int>;
  likes_lt?: Maybe<Int>;
  likes_lte?: Maybe<Int>;
  likes_gt?: Maybe<Int>;
  likes_gte?: Maybe<Int>;
  views?: Maybe<Int>;
  views_not?: Maybe<Int>;
  views_in?: Maybe<Int[] | Int>;
  views_not_in?: Maybe<Int[] | Int>;
  views_lt?: Maybe<Int>;
  views_lte?: Maybe<Int>;
  views_gt?: Maybe<Int>;
  views_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<ImageWhereInput[] | ImageWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  pseudo?: Maybe<String>;
  pseudo_not?: Maybe<String>;
  pseudo_in?: Maybe<String[] | String>;
  pseudo_not_in?: Maybe<String[] | String>;
  pseudo_lt?: Maybe<String>;
  pseudo_lte?: Maybe<String>;
  pseudo_gt?: Maybe<String>;
  pseudo_gte?: Maybe<String>;
  pseudo_contains?: Maybe<String>;
  pseudo_not_contains?: Maybe<String>;
  pseudo_starts_with?: Maybe<String>;
  pseudo_not_starts_with?: Maybe<String>;
  pseudo_ends_with?: Maybe<String>;
  pseudo_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type InteractionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface InteractionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nendoroid?: Maybe<NendoroidWhereInput>;
  user?: Maybe<UserWhereInput>;
  type?: Maybe<InteractionType>;
  type_not?: Maybe<InteractionType>;
  type_in?: Maybe<InteractionType[] | InteractionType>;
  type_not_in?: Maybe<InteractionType[] | InteractionType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InteractionWhereInput[] | InteractionWhereInput>;
}

export interface NendoroidWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  formattedName?: Maybe<String>;
  formattedName_not?: Maybe<String>;
  formattedName_in?: Maybe<String[] | String>;
  formattedName_not_in?: Maybe<String[] | String>;
  formattedName_lt?: Maybe<String>;
  formattedName_lte?: Maybe<String>;
  formattedName_gt?: Maybe<String>;
  formattedName_gte?: Maybe<String>;
  formattedName_contains?: Maybe<String>;
  formattedName_not_contains?: Maybe<String>;
  formattedName_starts_with?: Maybe<String>;
  formattedName_not_starts_with?: Maybe<String>;
  formattedName_ends_with?: Maybe<String>;
  formattedName_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  series?: Maybe<String>;
  series_not?: Maybe<String>;
  series_in?: Maybe<String[] | String>;
  series_not_in?: Maybe<String[] | String>;
  series_lt?: Maybe<String>;
  series_lte?: Maybe<String>;
  series_gt?: Maybe<String>;
  series_gte?: Maybe<String>;
  series_contains?: Maybe<String>;
  series_not_contains?: Maybe<String>;
  series_starts_with?: Maybe<String>;
  series_not_starts_with?: Maybe<String>;
  series_ends_with?: Maybe<String>;
  series_not_ends_with?: Maybe<String>;
  manufacturer?: Maybe<String>;
  manufacturer_not?: Maybe<String>;
  manufacturer_in?: Maybe<String[] | String>;
  manufacturer_not_in?: Maybe<String[] | String>;
  manufacturer_lt?: Maybe<String>;
  manufacturer_lte?: Maybe<String>;
  manufacturer_gt?: Maybe<String>;
  manufacturer_gte?: Maybe<String>;
  manufacturer_contains?: Maybe<String>;
  manufacturer_not_contains?: Maybe<String>;
  manufacturer_starts_with?: Maybe<String>;
  manufacturer_not_starts_with?: Maybe<String>;
  manufacturer_ends_with?: Maybe<String>;
  manufacturer_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  releaseDate?: Maybe<DateTimeInput>;
  releaseDate_not?: Maybe<DateTimeInput>;
  releaseDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_lt?: Maybe<DateTimeInput>;
  releaseDate_lte?: Maybe<DateTimeInput>;
  releaseDate_gt?: Maybe<DateTimeInput>;
  releaseDate_gte?: Maybe<DateTimeInput>;
  specifications?: Maybe<String>;
  specifications_not?: Maybe<String>;
  specifications_in?: Maybe<String[] | String>;
  specifications_not_in?: Maybe<String[] | String>;
  specifications_lt?: Maybe<String>;
  specifications_lte?: Maybe<String>;
  specifications_gt?: Maybe<String>;
  specifications_gte?: Maybe<String>;
  specifications_contains?: Maybe<String>;
  specifications_not_contains?: Maybe<String>;
  specifications_starts_with?: Maybe<String>;
  specifications_not_starts_with?: Maybe<String>;
  specifications_ends_with?: Maybe<String>;
  specifications_not_ends_with?: Maybe<String>;
  sculptor?: Maybe<String>;
  sculptor_not?: Maybe<String>;
  sculptor_in?: Maybe<String[] | String>;
  sculptor_not_in?: Maybe<String[] | String>;
  sculptor_lt?: Maybe<String>;
  sculptor_lte?: Maybe<String>;
  sculptor_gt?: Maybe<String>;
  sculptor_gte?: Maybe<String>;
  sculptor_contains?: Maybe<String>;
  sculptor_not_contains?: Maybe<String>;
  sculptor_starts_with?: Maybe<String>;
  sculptor_not_starts_with?: Maybe<String>;
  sculptor_ends_with?: Maybe<String>;
  sculptor_not_ends_with?: Maybe<String>;
  cooperation?: Maybe<String>;
  cooperation_not?: Maybe<String>;
  cooperation_in?: Maybe<String[] | String>;
  cooperation_not_in?: Maybe<String[] | String>;
  cooperation_lt?: Maybe<String>;
  cooperation_lte?: Maybe<String>;
  cooperation_gt?: Maybe<String>;
  cooperation_gte?: Maybe<String>;
  cooperation_contains?: Maybe<String>;
  cooperation_not_contains?: Maybe<String>;
  cooperation_starts_with?: Maybe<String>;
  cooperation_not_starts_with?: Maybe<String>;
  cooperation_ends_with?: Maybe<String>;
  cooperation_not_ends_with?: Maybe<String>;
  planningProduction?: Maybe<String>;
  planningProduction_not?: Maybe<String>;
  planningProduction_in?: Maybe<String[] | String>;
  planningProduction_not_in?: Maybe<String[] | String>;
  planningProduction_lt?: Maybe<String>;
  planningProduction_lte?: Maybe<String>;
  planningProduction_gt?: Maybe<String>;
  planningProduction_gte?: Maybe<String>;
  planningProduction_contains?: Maybe<String>;
  planningProduction_not_contains?: Maybe<String>;
  planningProduction_starts_with?: Maybe<String>;
  planningProduction_not_starts_with?: Maybe<String>;
  planningProduction_ends_with?: Maybe<String>;
  planningProduction_not_ends_with?: Maybe<String>;
  releasedBy?: Maybe<String>;
  releasedBy_not?: Maybe<String>;
  releasedBy_in?: Maybe<String[] | String>;
  releasedBy_not_in?: Maybe<String[] | String>;
  releasedBy_lt?: Maybe<String>;
  releasedBy_lte?: Maybe<String>;
  releasedBy_gt?: Maybe<String>;
  releasedBy_gte?: Maybe<String>;
  releasedBy_contains?: Maybe<String>;
  releasedBy_not_contains?: Maybe<String>;
  releasedBy_starts_with?: Maybe<String>;
  releasedBy_not_starts_with?: Maybe<String>;
  releasedBy_ends_with?: Maybe<String>;
  releasedBy_not_ends_with?: Maybe<String>;
  distributedBy?: Maybe<String>;
  distributedBy_not?: Maybe<String>;
  distributedBy_in?: Maybe<String[] | String>;
  distributedBy_not_in?: Maybe<String[] | String>;
  distributedBy_lt?: Maybe<String>;
  distributedBy_lte?: Maybe<String>;
  distributedBy_gt?: Maybe<String>;
  distributedBy_gte?: Maybe<String>;
  distributedBy_contains?: Maybe<String>;
  distributedBy_not_contains?: Maybe<String>;
  distributedBy_starts_with?: Maybe<String>;
  distributedBy_not_starts_with?: Maybe<String>;
  distributedBy_ends_with?: Maybe<String>;
  distributedBy_not_ends_with?: Maybe<String>;
  srcUrl?: Maybe<String>;
  srcUrl_not?: Maybe<String>;
  srcUrl_in?: Maybe<String[] | String>;
  srcUrl_not_in?: Maybe<String[] | String>;
  srcUrl_lt?: Maybe<String>;
  srcUrl_lte?: Maybe<String>;
  srcUrl_gt?: Maybe<String>;
  srcUrl_gte?: Maybe<String>;
  srcUrl_contains?: Maybe<String>;
  srcUrl_not_contains?: Maybe<String>;
  srcUrl_starts_with?: Maybe<String>;
  srcUrl_not_starts_with?: Maybe<String>;
  srcUrl_ends_with?: Maybe<String>;
  srcUrl_not_ends_with?: Maybe<String>;
  range?: Maybe<String>;
  range_not?: Maybe<String>;
  range_in?: Maybe<String[] | String>;
  range_not_in?: Maybe<String[] | String>;
  range_lt?: Maybe<String>;
  range_lte?: Maybe<String>;
  range_gt?: Maybe<String>;
  range_gte?: Maybe<String>;
  range_contains?: Maybe<String>;
  range_not_contains?: Maybe<String>;
  range_starts_with?: Maybe<String>;
  range_not_starts_with?: Maybe<String>;
  range_ends_with?: Maybe<String>;
  range_not_ends_with?: Maybe<String>;
  interactions_some?: Maybe<InteractionWhereInput>;
  AND?: Maybe<NendoroidWhereInput[] | NendoroidWhereInput>;
}

export type ManufacturerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ManufacturerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ManufacturerWhereInput[] | ManufacturerWhereInput>;
}

export type NendoroidWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SculptorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SculptorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SculptorWhereInput[] | SculptorWhereInput>;
}

export type SerieWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SerieWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SerieWhereInput[] | SerieWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  pseudo?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface ImageCreateInput {
  id?: Maybe<ID_Input>;
  likes: Int;
  views: Int;
  user: UserCreateOneInput;
  title: String;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  pseudo?: Maybe<String>;
  email: String;
  avatar?: Maybe<String>;
  password: String;
}

export interface ImageUpdateInput {
  likes?: Maybe<Int>;
  views?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  title?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  pseudo?: Maybe<String>;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ImageUpdateManyMutationInput {
  likes?: Maybe<Int>;
  views?: Maybe<Int>;
  title?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
  url?: Maybe<String>;
}

export interface InteractionCreateInput {
  id?: Maybe<ID_Input>;
  nendoroid: NendoroidCreateOneWithoutInteractionsInput;
  user: UserCreateOneInput;
  type: InteractionType;
}

export interface NendoroidCreateOneWithoutInteractionsInput {
  create?: Maybe<NendoroidCreateWithoutInteractionsInput>;
  connect?: Maybe<NendoroidWhereUniqueInput>;
}

export interface NendoroidCreateWithoutInteractionsInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  number?: Maybe<Int>;
  formattedName: String;
  title?: Maybe<String>;
  description?: Maybe<NendoroidCreatedescriptionInput>;
  images?: Maybe<NendoroidCreateimagesInput>;
  series?: Maybe<String>;
  manufacturer?: Maybe<String>;
  category?: Maybe<String>;
  price?: Maybe<Int>;
  releaseDate?: Maybe<DateTimeInput>;
  specifications?: Maybe<String>;
  sculptor?: Maybe<String>;
  cooperation?: Maybe<String>;
  planningProduction?: Maybe<String>;
  releasedBy?: Maybe<String>;
  distributedBy?: Maybe<String>;
  srcUrl?: Maybe<String>;
  range?: Maybe<String>;
}

export interface NendoroidCreatedescriptionInput {
  set?: Maybe<String[] | String>;
}

export interface NendoroidCreateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface InteractionUpdateInput {
  nendoroid?: Maybe<NendoroidUpdateOneRequiredWithoutInteractionsInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  type?: Maybe<InteractionType>;
}

export interface NendoroidUpdateOneRequiredWithoutInteractionsInput {
  create?: Maybe<NendoroidCreateWithoutInteractionsInput>;
  update?: Maybe<NendoroidUpdateWithoutInteractionsDataInput>;
  upsert?: Maybe<NendoroidUpsertWithoutInteractionsInput>;
  connect?: Maybe<NendoroidWhereUniqueInput>;
}

export interface NendoroidUpdateWithoutInteractionsDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  formattedName?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<NendoroidUpdatedescriptionInput>;
  images?: Maybe<NendoroidUpdateimagesInput>;
  series?: Maybe<String>;
  manufacturer?: Maybe<String>;
  category?: Maybe<String>;
  price?: Maybe<Int>;
  releaseDate?: Maybe<DateTimeInput>;
  specifications?: Maybe<String>;
  sculptor?: Maybe<String>;
  cooperation?: Maybe<String>;
  planningProduction?: Maybe<String>;
  releasedBy?: Maybe<String>;
  distributedBy?: Maybe<String>;
  srcUrl?: Maybe<String>;
  range?: Maybe<String>;
}

export interface NendoroidUpdatedescriptionInput {
  set?: Maybe<String[] | String>;
}

export interface NendoroidUpdateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface NendoroidUpsertWithoutInteractionsInput {
  update: NendoroidUpdateWithoutInteractionsDataInput;
  create: NendoroidCreateWithoutInteractionsInput;
}

export interface InteractionUpdateManyMutationInput {
  type?: Maybe<InteractionType>;
}

export interface ManufacturerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ManufacturerUpdateInput {
  name?: Maybe<String>;
}

export interface ManufacturerUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface NendoroidCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  number?: Maybe<Int>;
  formattedName: String;
  title?: Maybe<String>;
  description?: Maybe<NendoroidCreatedescriptionInput>;
  images?: Maybe<NendoroidCreateimagesInput>;
  series?: Maybe<String>;
  manufacturer?: Maybe<String>;
  category?: Maybe<String>;
  price?: Maybe<Int>;
  releaseDate?: Maybe<DateTimeInput>;
  specifications?: Maybe<String>;
  sculptor?: Maybe<String>;
  cooperation?: Maybe<String>;
  planningProduction?: Maybe<String>;
  releasedBy?: Maybe<String>;
  distributedBy?: Maybe<String>;
  srcUrl?: Maybe<String>;
  range?: Maybe<String>;
  interactions?: Maybe<InteractionCreateManyWithoutNendoroidInput>;
}

export interface InteractionCreateManyWithoutNendoroidInput {
  create?: Maybe<
    | InteractionCreateWithoutNendoroidInput[]
    | InteractionCreateWithoutNendoroidInput
  >;
  connect?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
}

export interface InteractionCreateWithoutNendoroidInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  type: InteractionType;
}

export interface NendoroidUpdateInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  formattedName?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<NendoroidUpdatedescriptionInput>;
  images?: Maybe<NendoroidUpdateimagesInput>;
  series?: Maybe<String>;
  manufacturer?: Maybe<String>;
  category?: Maybe<String>;
  price?: Maybe<Int>;
  releaseDate?: Maybe<DateTimeInput>;
  specifications?: Maybe<String>;
  sculptor?: Maybe<String>;
  cooperation?: Maybe<String>;
  planningProduction?: Maybe<String>;
  releasedBy?: Maybe<String>;
  distributedBy?: Maybe<String>;
  srcUrl?: Maybe<String>;
  range?: Maybe<String>;
  interactions?: Maybe<InteractionUpdateManyWithoutNendoroidInput>;
}

export interface InteractionUpdateManyWithoutNendoroidInput {
  create?: Maybe<
    | InteractionCreateWithoutNendoroidInput[]
    | InteractionCreateWithoutNendoroidInput
  >;
  delete?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
  connect?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
  set?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
  disconnect?: Maybe<
    InteractionWhereUniqueInput[] | InteractionWhereUniqueInput
  >;
  update?: Maybe<
    | InteractionUpdateWithWhereUniqueWithoutNendoroidInput[]
    | InteractionUpdateWithWhereUniqueWithoutNendoroidInput
  >;
  upsert?: Maybe<
    | InteractionUpsertWithWhereUniqueWithoutNendoroidInput[]
    | InteractionUpsertWithWhereUniqueWithoutNendoroidInput
  >;
  deleteMany?: Maybe<
    InteractionScalarWhereInput[] | InteractionScalarWhereInput
  >;
  updateMany?: Maybe<
    | InteractionUpdateManyWithWhereNestedInput[]
    | InteractionUpdateManyWithWhereNestedInput
  >;
}

export interface InteractionUpdateWithWhereUniqueWithoutNendoroidInput {
  where: InteractionWhereUniqueInput;
  data: InteractionUpdateWithoutNendoroidDataInput;
}

export interface InteractionUpdateWithoutNendoroidDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  type?: Maybe<InteractionType>;
}

export interface InteractionUpsertWithWhereUniqueWithoutNendoroidInput {
  where: InteractionWhereUniqueInput;
  update: InteractionUpdateWithoutNendoroidDataInput;
  create: InteractionCreateWithoutNendoroidInput;
}

export interface InteractionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<InteractionType>;
  type_not?: Maybe<InteractionType>;
  type_in?: Maybe<InteractionType[] | InteractionType>;
  type_not_in?: Maybe<InteractionType[] | InteractionType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InteractionScalarWhereInput[] | InteractionScalarWhereInput>;
  OR?: Maybe<InteractionScalarWhereInput[] | InteractionScalarWhereInput>;
  NOT?: Maybe<InteractionScalarWhereInput[] | InteractionScalarWhereInput>;
}

export interface InteractionUpdateManyWithWhereNestedInput {
  where: InteractionScalarWhereInput;
  data: InteractionUpdateManyDataInput;
}

export interface InteractionUpdateManyDataInput {
  type?: Maybe<InteractionType>;
}

export interface NendoroidUpdateManyMutationInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  formattedName?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<NendoroidUpdatedescriptionInput>;
  images?: Maybe<NendoroidUpdateimagesInput>;
  series?: Maybe<String>;
  manufacturer?: Maybe<String>;
  category?: Maybe<String>;
  price?: Maybe<Int>;
  releaseDate?: Maybe<DateTimeInput>;
  specifications?: Maybe<String>;
  sculptor?: Maybe<String>;
  cooperation?: Maybe<String>;
  planningProduction?: Maybe<String>;
  releasedBy?: Maybe<String>;
  distributedBy?: Maybe<String>;
  srcUrl?: Maybe<String>;
  range?: Maybe<String>;
}

export interface SculptorCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface SculptorUpdateInput {
  name?: Maybe<String>;
}

export interface SculptorUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SerieCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface SerieUpdateInput {
  name?: Maybe<String>;
}

export interface SerieUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  pseudo?: Maybe<String>;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  pseudo?: Maybe<String>;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  password?: Maybe<String>;
}

export interface ImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ImageWhereInput>;
  AND?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
}

export interface InteractionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InteractionWhereInput>;
  AND?: Maybe<
    InteractionSubscriptionWhereInput[] | InteractionSubscriptionWhereInput
  >;
}

export interface ManufacturerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ManufacturerWhereInput>;
  AND?: Maybe<
    ManufacturerSubscriptionWhereInput[] | ManufacturerSubscriptionWhereInput
  >;
}

export interface NendoroidSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NendoroidWhereInput>;
  AND?: Maybe<
    NendoroidSubscriptionWhereInput[] | NendoroidSubscriptionWhereInput
  >;
}

export interface SculptorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SculptorWhereInput>;
  AND?: Maybe<
    SculptorSubscriptionWhereInput[] | SculptorSubscriptionWhereInput
  >;
}

export interface SerieSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SerieWhereInput>;
  AND?: Maybe<SerieSubscriptionWhereInput[] | SerieSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Image {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  likes: Int;
  views: Int;
  title: String;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  likes: () => Promise<Int>;
  views: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ImageSubscription
  extends Promise<AsyncIterator<Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  likes: () => Promise<AsyncIterator<Int>>;
  views: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ImageNullablePromise
  extends Promise<Image | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  likes: () => Promise<Int>;
  views: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName?: String;
  lastName?: String;
  pseudo?: String;
  email: String;
  avatar?: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  pseudo: () => Promise<String>;
  email: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  pseudo: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  pseudo: () => Promise<String>;
  email: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise
  extends Promise<ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription
  extends Promise<AsyncIterator<ImageEdge>>,
    Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise
  extends Promise<AggregateImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Interaction {
  id: ID_Output;
  type: InteractionType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InteractionPromise extends Promise<Interaction>, Fragmentable {
  id: () => Promise<ID_Output>;
  nendoroid: <T = NendoroidPromise>() => T;
  user: <T = UserPromise>() => T;
  type: () => Promise<InteractionType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InteractionSubscription
  extends Promise<AsyncIterator<Interaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nendoroid: <T = NendoroidSubscription>() => T;
  user: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<InteractionType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InteractionNullablePromise
  extends Promise<Interaction | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nendoroid: <T = NendoroidPromise>() => T;
  user: <T = UserPromise>() => T;
  type: () => Promise<InteractionType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Nendoroid {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
  number?: Int;
  formattedName: String;
  title?: String;
  description: String[];
  images: String[];
  series?: String;
  manufacturer?: String;
  category?: String;
  price?: Int;
  releaseDate?: DateTimeOutput;
  specifications?: String;
  sculptor?: String;
  cooperation?: String;
  planningProduction?: String;
  releasedBy?: String;
  distributedBy?: String;
  srcUrl?: String;
  range?: String;
}

export interface NendoroidPromise extends Promise<Nendoroid>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  number: () => Promise<Int>;
  formattedName: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String[]>;
  images: () => Promise<String[]>;
  series: () => Promise<String>;
  manufacturer: () => Promise<String>;
  category: () => Promise<String>;
  price: () => Promise<Int>;
  releaseDate: () => Promise<DateTimeOutput>;
  specifications: () => Promise<String>;
  sculptor: () => Promise<String>;
  cooperation: () => Promise<String>;
  planningProduction: () => Promise<String>;
  releasedBy: () => Promise<String>;
  distributedBy: () => Promise<String>;
  srcUrl: () => Promise<String>;
  range: () => Promise<String>;
  interactions: <T = FragmentableArray<Interaction>>(args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NendoroidSubscription
  extends Promise<AsyncIterator<Nendoroid>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  formattedName: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String[]>>;
  images: () => Promise<AsyncIterator<String[]>>;
  series: () => Promise<AsyncIterator<String>>;
  manufacturer: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  releaseDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  specifications: () => Promise<AsyncIterator<String>>;
  sculptor: () => Promise<AsyncIterator<String>>;
  cooperation: () => Promise<AsyncIterator<String>>;
  planningProduction: () => Promise<AsyncIterator<String>>;
  releasedBy: () => Promise<AsyncIterator<String>>;
  distributedBy: () => Promise<AsyncIterator<String>>;
  srcUrl: () => Promise<AsyncIterator<String>>;
  range: () => Promise<AsyncIterator<String>>;
  interactions: <T = Promise<AsyncIterator<InteractionSubscription>>>(args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NendoroidNullablePromise
  extends Promise<Nendoroid | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  number: () => Promise<Int>;
  formattedName: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String[]>;
  images: () => Promise<String[]>;
  series: () => Promise<String>;
  manufacturer: () => Promise<String>;
  category: () => Promise<String>;
  price: () => Promise<Int>;
  releaseDate: () => Promise<DateTimeOutput>;
  specifications: () => Promise<String>;
  sculptor: () => Promise<String>;
  cooperation: () => Promise<String>;
  planningProduction: () => Promise<String>;
  releasedBy: () => Promise<String>;
  distributedBy: () => Promise<String>;
  srcUrl: () => Promise<String>;
  range: () => Promise<String>;
  interactions: <T = FragmentableArray<Interaction>>(args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InteractionConnection {
  pageInfo: PageInfo;
  edges: InteractionEdge[];
}

export interface InteractionConnectionPromise
  extends Promise<InteractionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InteractionEdge>>() => T;
  aggregate: <T = AggregateInteractionPromise>() => T;
}

export interface InteractionConnectionSubscription
  extends Promise<AsyncIterator<InteractionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InteractionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInteractionSubscription>() => T;
}

export interface InteractionEdge {
  node: Interaction;
  cursor: String;
}

export interface InteractionEdgePromise
  extends Promise<InteractionEdge>,
    Fragmentable {
  node: <T = InteractionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InteractionEdgeSubscription
  extends Promise<AsyncIterator<InteractionEdge>>,
    Fragmentable {
  node: <T = InteractionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInteraction {
  count: Int;
}

export interface AggregateInteractionPromise
  extends Promise<AggregateInteraction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInteractionSubscription
  extends Promise<AsyncIterator<AggregateInteraction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Manufacturer {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ManufacturerPromise
  extends Promise<Manufacturer>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface ManufacturerSubscription
  extends Promise<AsyncIterator<Manufacturer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ManufacturerNullablePromise
  extends Promise<Manufacturer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface ManufacturerConnection {
  pageInfo: PageInfo;
  edges: ManufacturerEdge[];
}

export interface ManufacturerConnectionPromise
  extends Promise<ManufacturerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ManufacturerEdge>>() => T;
  aggregate: <T = AggregateManufacturerPromise>() => T;
}

export interface ManufacturerConnectionSubscription
  extends Promise<AsyncIterator<ManufacturerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ManufacturerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateManufacturerSubscription>() => T;
}

export interface ManufacturerEdge {
  node: Manufacturer;
  cursor: String;
}

export interface ManufacturerEdgePromise
  extends Promise<ManufacturerEdge>,
    Fragmentable {
  node: <T = ManufacturerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ManufacturerEdgeSubscription
  extends Promise<AsyncIterator<ManufacturerEdge>>,
    Fragmentable {
  node: <T = ManufacturerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateManufacturer {
  count: Int;
}

export interface AggregateManufacturerPromise
  extends Promise<AggregateManufacturer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateManufacturerSubscription
  extends Promise<AsyncIterator<AggregateManufacturer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NendoroidConnection {
  pageInfo: PageInfo;
  edges: NendoroidEdge[];
}

export interface NendoroidConnectionPromise
  extends Promise<NendoroidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NendoroidEdge>>() => T;
  aggregate: <T = AggregateNendoroidPromise>() => T;
}

export interface NendoroidConnectionSubscription
  extends Promise<AsyncIterator<NendoroidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NendoroidEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNendoroidSubscription>() => T;
}

export interface NendoroidEdge {
  node: Nendoroid;
  cursor: String;
}

export interface NendoroidEdgePromise
  extends Promise<NendoroidEdge>,
    Fragmentable {
  node: <T = NendoroidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NendoroidEdgeSubscription
  extends Promise<AsyncIterator<NendoroidEdge>>,
    Fragmentable {
  node: <T = NendoroidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNendoroid {
  count: Int;
}

export interface AggregateNendoroidPromise
  extends Promise<AggregateNendoroid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNendoroidSubscription
  extends Promise<AsyncIterator<AggregateNendoroid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Sculptor {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface SculptorPromise extends Promise<Sculptor>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface SculptorSubscription
  extends Promise<AsyncIterator<Sculptor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SculptorNullablePromise
  extends Promise<Sculptor | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface SculptorConnection {
  pageInfo: PageInfo;
  edges: SculptorEdge[];
}

export interface SculptorConnectionPromise
  extends Promise<SculptorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SculptorEdge>>() => T;
  aggregate: <T = AggregateSculptorPromise>() => T;
}

export interface SculptorConnectionSubscription
  extends Promise<AsyncIterator<SculptorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SculptorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSculptorSubscription>() => T;
}

export interface SculptorEdge {
  node: Sculptor;
  cursor: String;
}

export interface SculptorEdgePromise
  extends Promise<SculptorEdge>,
    Fragmentable {
  node: <T = SculptorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SculptorEdgeSubscription
  extends Promise<AsyncIterator<SculptorEdge>>,
    Fragmentable {
  node: <T = SculptorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSculptor {
  count: Int;
}

export interface AggregateSculptorPromise
  extends Promise<AggregateSculptor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSculptorSubscription
  extends Promise<AsyncIterator<AggregateSculptor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Serie {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface SeriePromise extends Promise<Serie>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface SerieSubscription
  extends Promise<AsyncIterator<Serie>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SerieNullablePromise
  extends Promise<Serie | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface SerieConnection {
  pageInfo: PageInfo;
  edges: SerieEdge[];
}

export interface SerieConnectionPromise
  extends Promise<SerieConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SerieEdge>>() => T;
  aggregate: <T = AggregateSeriePromise>() => T;
}

export interface SerieConnectionSubscription
  extends Promise<AsyncIterator<SerieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SerieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSerieSubscription>() => T;
}

export interface SerieEdge {
  node: Serie;
  cursor: String;
}

export interface SerieEdgePromise extends Promise<SerieEdge>, Fragmentable {
  node: <T = SeriePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SerieEdgeSubscription
  extends Promise<AsyncIterator<SerieEdge>>,
    Fragmentable {
  node: <T = SerieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSerie {
  count: Int;
}

export interface AggregateSeriePromise
  extends Promise<AggregateSerie>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSerieSubscription
  extends Promise<AsyncIterator<AggregateSerie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ImageSubscriptionPayload {
  mutation: MutationType;
  node: Image;
  updatedFields: String[];
  previousValues: ImagePreviousValues;
}

export interface ImageSubscriptionPayloadPromise
  extends Promise<ImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImagePreviousValuesPromise>() => T;
}

export interface ImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImagePreviousValuesSubscription>() => T;
}

export interface ImagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  likes: Int;
  views: Int;
  title: String;
  filename: String;
  mimetype: String;
  encoding: String;
  url: String;
}

export interface ImagePreviousValuesPromise
  extends Promise<ImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  likes: () => Promise<Int>;
  views: () => Promise<Int>;
  title: () => Promise<String>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  likes: () => Promise<AsyncIterator<Int>>;
  views: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface InteractionSubscriptionPayload {
  mutation: MutationType;
  node: Interaction;
  updatedFields: String[];
  previousValues: InteractionPreviousValues;
}

export interface InteractionSubscriptionPayloadPromise
  extends Promise<InteractionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InteractionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InteractionPreviousValuesPromise>() => T;
}

export interface InteractionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InteractionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InteractionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InteractionPreviousValuesSubscription>() => T;
}

export interface InteractionPreviousValues {
  id: ID_Output;
  type: InteractionType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InteractionPreviousValuesPromise
  extends Promise<InteractionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<InteractionType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InteractionPreviousValuesSubscription
  extends Promise<AsyncIterator<InteractionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<InteractionType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ManufacturerSubscriptionPayload {
  mutation: MutationType;
  node: Manufacturer;
  updatedFields: String[];
  previousValues: ManufacturerPreviousValues;
}

export interface ManufacturerSubscriptionPayloadPromise
  extends Promise<ManufacturerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ManufacturerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ManufacturerPreviousValuesPromise>() => T;
}

export interface ManufacturerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ManufacturerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ManufacturerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ManufacturerPreviousValuesSubscription>() => T;
}

export interface ManufacturerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ManufacturerPreviousValuesPromise
  extends Promise<ManufacturerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface ManufacturerPreviousValuesSubscription
  extends Promise<AsyncIterator<ManufacturerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NendoroidSubscriptionPayload {
  mutation: MutationType;
  node: Nendoroid;
  updatedFields: String[];
  previousValues: NendoroidPreviousValues;
}

export interface NendoroidSubscriptionPayloadPromise
  extends Promise<NendoroidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NendoroidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NendoroidPreviousValuesPromise>() => T;
}

export interface NendoroidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NendoroidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NendoroidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NendoroidPreviousValuesSubscription>() => T;
}

export interface NendoroidPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
  number?: Int;
  formattedName: String;
  title?: String;
  description: String[];
  images: String[];
  series?: String;
  manufacturer?: String;
  category?: String;
  price?: Int;
  releaseDate?: DateTimeOutput;
  specifications?: String;
  sculptor?: String;
  cooperation?: String;
  planningProduction?: String;
  releasedBy?: String;
  distributedBy?: String;
  srcUrl?: String;
  range?: String;
}

export interface NendoroidPreviousValuesPromise
  extends Promise<NendoroidPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  number: () => Promise<Int>;
  formattedName: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String[]>;
  images: () => Promise<String[]>;
  series: () => Promise<String>;
  manufacturer: () => Promise<String>;
  category: () => Promise<String>;
  price: () => Promise<Int>;
  releaseDate: () => Promise<DateTimeOutput>;
  specifications: () => Promise<String>;
  sculptor: () => Promise<String>;
  cooperation: () => Promise<String>;
  planningProduction: () => Promise<String>;
  releasedBy: () => Promise<String>;
  distributedBy: () => Promise<String>;
  srcUrl: () => Promise<String>;
  range: () => Promise<String>;
}

export interface NendoroidPreviousValuesSubscription
  extends Promise<AsyncIterator<NendoroidPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  formattedName: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String[]>>;
  images: () => Promise<AsyncIterator<String[]>>;
  series: () => Promise<AsyncIterator<String>>;
  manufacturer: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  releaseDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  specifications: () => Promise<AsyncIterator<String>>;
  sculptor: () => Promise<AsyncIterator<String>>;
  cooperation: () => Promise<AsyncIterator<String>>;
  planningProduction: () => Promise<AsyncIterator<String>>;
  releasedBy: () => Promise<AsyncIterator<String>>;
  distributedBy: () => Promise<AsyncIterator<String>>;
  srcUrl: () => Promise<AsyncIterator<String>>;
  range: () => Promise<AsyncIterator<String>>;
}

export interface SculptorSubscriptionPayload {
  mutation: MutationType;
  node: Sculptor;
  updatedFields: String[];
  previousValues: SculptorPreviousValues;
}

export interface SculptorSubscriptionPayloadPromise
  extends Promise<SculptorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SculptorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SculptorPreviousValuesPromise>() => T;
}

export interface SculptorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SculptorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SculptorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SculptorPreviousValuesSubscription>() => T;
}

export interface SculptorPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface SculptorPreviousValuesPromise
  extends Promise<SculptorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface SculptorPreviousValuesSubscription
  extends Promise<AsyncIterator<SculptorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SerieSubscriptionPayload {
  mutation: MutationType;
  node: Serie;
  updatedFields: String[];
  previousValues: SeriePreviousValues;
}

export interface SerieSubscriptionPayloadPromise
  extends Promise<SerieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeriePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeriePreviousValuesPromise>() => T;
}

export interface SerieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SerieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SerieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeriePreviousValuesSubscription>() => T;
}

export interface SeriePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface SeriePreviousValuesPromise
  extends Promise<SeriePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface SeriePreviousValuesSubscription
  extends Promise<AsyncIterator<SeriePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName?: String;
  lastName?: String;
  pseudo?: String;
  email: String;
  avatar?: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  pseudo: () => Promise<String>;
  email: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  pseudo: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Nendoroid",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Interaction",
    embedded: false
  },
  {
    name: "Serie",
    embedded: false
  },
  {
    name: "Manufacturer",
    embedded: false
  },
  {
    name: "Sculptor",
    embedded: false
  },
  {
    name: "Image",
    embedded: false
  },
  {
    name: "InteractionType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
