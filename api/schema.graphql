scalar Date
scalar Upload

type Query {
  getNendoroids(
    formattedName: String
    orderBy: NendoroidOrderByInput
  ): Nendoroids!

  getUsers(
    pseudo: String
    orderBy: UserOrderByInput
    skip: Int
    first: Int
  ): Users!
  
  getSeries(name: String, orderBy: SerieOrderByInput): Series!
  getManufacturers(
    name: String
    orderBy: ManufacturerOrderByInput
  ): Manufacturers!
  getSculptors(name: String, orderBy: SculptorOrderByInput): Sculptors!

  getImages(
    filter: String
    skip: Int
    first: Int
    orderBy: NendoroidOrderByInput
  ): Images!
  getNendoroid(id: ID!): Nendoroid!
  getImage(id: ID!): Image!
  getUser(id: ID!): User!
  getUserByPseudo(pseudo: String!): User!
  getInteractions: Interactions!
  getNendoroidsLikedBy(id: ID!): Nendoroids!
  getNendoroidsWishedBy(id: ID!): Nendoroids!
  getNendoroidsOwnedBy(id: ID!): Nendoroids!
  getNendoroidsByRange(
    min: Int!
    max: Int!
    name: String
    orderBy: NendoroidOrderByInput
  ): Nendoroids!

  getNendoroidsBySerie(series: String!): Nendoroids!
  getNendoroidsByManufacturer(manufacturer: String!): Nendoroids!
  getNendoroidsBySculptor(sculptor: String!): Nendoroids!
  files: [String]
}

type Mutation {
  createImage(id: ID!, title: String!, filename: String!, url: String!): Image!
  signS3(filename: String!, filetype: String!): S3Payload!
  createNendoroid(formattedName: String!, number: String!): Nendoroid!
  updateUser(id: ID!, firstName: String, lastName: String): User!
  signup(email: String!, password: String!, pseudo: String!): AuthPayload
  login(pseudo: String!, password: String!): AuthPayload
  createInteraction(
    nendoroidId: ID!
    userId: ID!
    type: InteractionType!
  ): Interaction
  deleteInteraction(interactionId: ID!): Interaction
  uploadFile(file: Upload!): Boolean
}

type AuthPayload {
  token: String
  user: User
}

type S3Payload {
  signedRequest: String!
  url: String!
}

type Nendoroids {
  nendoroids: [Nendoroid!]!
  count: Int!
}

type Interactions {
  interactions: [Interaction!]!
  count: Int!
}

type Users {
  users: [User!]!
  count: Int!
}

type Series {
  series: [Serie!]!
  count: Int!
}

type Nendoroid {
  id: ID!
  name: String
  number: Int
  formattedName: String!
  title: String
  description: [String!]!
  images: [String!]!
  series: String
  manufacturer: String
  category: String
  price: Int
  releaseDate: String
  specifications: String
  sculptor: String
  cooperation: String
  planningProduction: String
  releasedBy: String
  distributedBy: String
  srcUrl: String
  range: String
  interactions: [Interaction!]!
}

type User {
  id: ID!
  firstName: String
  lastName: String
  pseudo: String
  password: String!
  avatar: String
}

type Serie {
  id: ID!
  name: String!
}

type Manufacturer {
  id: ID!
  name: String!
}

type Manufacturers {
  manufacturers: [Manufacturer!]!
  count: Int!
}

type Sculptor {
  id: ID!
  name: String!
}

type Sculptors {
  sculptors: [Sculptor!]!
  count: Int!
}

type Subscription {
  newNendoroid: Nendoroid
  newInteraction: Interaction
}

type Interaction {
  id: ID!
  nendoroid: Nendoroid!
  user: User!
  type: InteractionType!
}

enum NendoroidOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  number_ASC
  number_DESC
  formattedName_ASC
  formattedName_DESC
}
enum SerieOrderByInput {
  name_ASC
  name_DESC
}
enum UserOrderByInput {
  pseudo_ASC
  pseudo_DESC
}
enum ManufacturerOrderByInput {
  name_ASC
  name_DESC
}
enum SculptorOrderByInput {
  name_ASC
  name_DESC
}

enum InteractionType {
  LIKE
  WISH
  OWN
}

type Image {
  id: ID!
  likes: Int!
  views: Int!
  user: User!
  title: String!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type Images {
  images: [Image!]!
  count: Int!
}
